// Generated by CoffeeScript 2.3.1
(function() {
  var fs, getFix, loadKnownImports;

  fs = require('fs');

  loadKnownImports = function() {
    var knownImportsFilename;
    knownImportsFilename = 'known-imports.json';
    if (!fs.existsSync(knownImportsFilename)) {
      return null;
    }
    return JSON.parse(fs.readFileSync(knownImportsFilename));
  };

  getFix = function({knownImports, name, context, allImports, lastNonlocalImport}) {
    var importName, knownImport, sourceCode;
    knownImport = knownImports != null ? knownImports[name] : void 0;
    if (!knownImport) {
      return null;
    }
    sourceCode = context.getSourceCode();
    if (typeof knownImport === 'string') {
      knownImport = {
        module: knownImport
      };
    }
    importName = `${knownImport.name ? `${knownImport.name} as ` : ''}${name}`;
    return function(fixer) {
      var existingImport, insertNewImport, lastExistingImport, lastNamedImport, lastSpecifier, leadingBrace, namedImports;
      existingImport = allImports.find(function({source}) {
        return source.value === knownImport.module;
      });
      if (existingImport) {
        if (knownImport.default) {
          leadingBrace = sourceCode.getTokenBefore(existingImport.specifiers[0]);
          return fixer.insertTextBefore(leadingBrace, `${importName}, `);
        }
        namedImports = existingImport.specifiers.filter(function({type}) {
          return type === 'ImportSpecifier';
        });
        if (namedImports.length) {
          lastNamedImport = namedImports[namedImports.length - 1];
          return fixer.insertTextAfter(lastNamedImport, `, ${importName}`);
        }
        lastSpecifier = existingImport.specifiers[existingImport.specifiers.length - 1];
        return fixer.insertTextAfter(lastSpecifier, `, {${importName}}`);
      }
      lastExistingImport = (function() {
        if (!allImports.length) {
          return null;
        }
        if (knownImport.local) {
          return allImports[allImports.length - 1];
        }
        if (lastNonlocalImport.found == null) {
          lastNonlocalImport.found = allImports.find(function({range}) {
            var followingChars;
            followingChars = sourceCode.text.slice(range[1], range[1] + 2);
            return followingChars === '\n\n';
          });
        }
        if (lastNonlocalImport.found != null) {
          return lastNonlocalImport.found;
        }
        return allImports[allImports.length - 1];
      })();
      insertNewImport = function(text) {
        var firstProgramToken;
        if (lastExistingImport) {
          return fixer.insertTextAfter(lastExistingImport, `\n${text}`);
        }
        firstProgramToken = sourceCode.getFirstToken(sourceCode.ast);
        return fixer.insertTextBefore(firstProgramToken, `${text}\n\n`);
      };
      if (knownImport.default) {
        return insertNewImport(`import ${importName} from '${knownImport.module}'`);
      }
      return insertNewImport(`import {${importName}} from '${knownImport.module}'`);
    };
  };

  module.exports = {loadKnownImports, getFix};

}).call(this);
