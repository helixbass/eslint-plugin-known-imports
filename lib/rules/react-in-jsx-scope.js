// Generated by CoffeeScript 2.5.1
(function() {
  /**
   * @fileoverview Prevent missing React when using JSX
   * @author Glen Mailer
   */
  'use strict';
  var docsUrl, getFix, pragmaUtil, variableUtil;

  variableUtil = require('eslint-plugin-react/lib/util/variable');

  pragmaUtil = require('eslint-plugin-react/lib/util/pragma');

  docsUrl = require('eslint-plugin-react/lib/util/docsUrl');

  // -----------------------------------------------------------------------------
  // Rule Definition
  // -----------------------------------------------------------------------------
  getFix = function({pragma, context, allImports}) {
    var existingReactImport, firstSpecifier, firstToken, openingBrace, sourceCode;
    if (pragma !== 'React') {
      return null;
    }
    sourceCode = context.getSourceCode();
    firstToken = sourceCode.getFirstToken(sourceCode.ast);
    existingReactImport = allImports.find(function({
        source: {value}
      }) {
      return value === 'react';
    });
    if (!existingReactImport) {
      return function(fixer) {
        return fixer.insertTextBefore(firstToken, "import React from 'react'\n");
      };
    }
    firstSpecifier = existingReactImport.specifiers[0];
    openingBrace = sourceCode.getTokenBefore(firstSpecifier);
    return function(fixer) {
      return fixer.insertTextBefore(openingBrace, 'React, ');
    };
  };

  module.exports = {
    meta: {
      docs: {
        description: 'Prevent missing React when using JSX',
        category: 'Possible Errors',
        recommended: true,
        url: docsUrl('react-in-jsx-scope')
      },
      schema: [],
      fixable: 'code'
    },
    create: function(context) {
      var NOT_DEFINED_MESSAGE, allImports, checkIfReactIsInScope, pragma;
      pragma = pragmaUtil.getFromContext(context);
      NOT_DEFINED_MESSAGE = "'{{name}}' must be in scope when using JSX";
      allImports = [];
      checkIfReactIsInScope = function(node) {
        var variables;
        variables = variableUtil.variablesInScope(context);
        if (variableUtil.findVariable(variables, pragma)) {
          return;
        }
        return context.report({
          node,
          message: NOT_DEFINED_MESSAGE,
          data: {
            name: pragma
          },
          fix: getFix({pragma, context, allImports})
        });
      };
      return {
        ImportDeclaration: function(node) {
          return allImports.push(node);
        },
        JSXOpeningElement: checkIfReactIsInScope,
        JSXOpeningFragment: checkIfReactIsInScope
      };
    }
  };

}).call(this);
