// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Rule to flag references to undeclared variables.
   * @author Mark Macdonald
   */
  var getFix, hasTypeOfOperator, loadKnownImports;

  ({loadKnownImports, getFix} = require('../utils'));

  //------------------------------------------------------------------------------
  // Helpers
  //------------------------------------------------------------------------------
  /**
   * Checks if the given node is the argument of a typeof operator.
   * @param {ASTNode} node The AST node being checked.
   * @returns {boolean} Whether or not the node is the argument of a typeof operator.
   */
  hasTypeOfOperator = function({parent}) {
    return parent.type === 'UnaryExpression' && parent.operator === 'typeof';
  };

  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'disallow the use of undeclared variables unless mentioned in `/*global */` comments',
        category: 'Variables',
        recommended: true,
        url: 'https://eslint.org/docs/rules/no-undef'
      },
      schema: [
        {
          type: 'object',
          properties: {
            typeof: {
              type: 'boolean'
            }
          },
          additionalProperties: false
        }
      ],
      fixable: 'code'
    },
    create: function(context) {
      var allImports, considerTypeOf, knownImports, lastNonlocalImport, options;
      options = context.options[0];
      considerTypeOf = !!((options != null ? options.typeof : void 0) === true);
      knownImports = loadKnownImports();
      allImports = [];
      lastNonlocalImport = {};
      return {
        ImportDeclaration: function(node) {
          return allImports.push(node);
        },
        'Program:exit': function(/* node */) {
          var globalScope;
          globalScope = context.getScope();
          return globalScope.through.forEach(function({identifier}) {
            if (!considerTypeOf && hasTypeOfOperator(identifier)) {
              return;
            }
            return context.report({
              node: identifier,
              message: "'{{name}}' is not defined.",
              data: identifier,
              fix: getFix({
                knownImports,
                name: identifier.name,
                context,
                allImports,
                lastNonlocalImport
              })
            });
          });
        }
      };
    }
  };

}).call(this);
